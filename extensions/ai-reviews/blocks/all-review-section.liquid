<div class="all-review-container">
  <div class="all-review-quick-info">
    <div class="app-header">
      <h1>Customer Reviews</h1>
      <p>View our reviews.. most are postive..</p>
    </div>

    {% render 'review-summary' %}
  </div>
  <div class="all-review-main">
    <div class="all-review-table"></div>
    <div class="pagination-container">
      <div class="pagination-wrapper">
        <button class="page-button page-button-edge">Previous</button>
        <div class="pagination-buttons-container"></div>
        <button class="page-button page-button-edge">Next Page</button>
      </div>
    </div>
  </div>
  <script id="reviewMainResponse"></script>
</div>


<script>
        const insertTableReviewItem = (review, container) => {
  const starToRender = 
    review.rating == 5 ? `{% render 'stars-5' %}` : 
    review.rating == 4 ? `{% render 'stars-4' %}` :
    review.rating == 3 ? `{% render 'stars-3' %}` :
    review.rating == 2 ? `{% render 'stars-2' %}` :
    review.rating == 1 ? `{% render 'stars-1' %}` :
    ''; 
     const nameParts = review.author.split(' ');
          const firstInitial = nameParts[0]?.charAt(0) || "";
          const secondInitial = nameParts[1]?.charAt(0) || "";
          const shortenedName = `${firstInitial}${secondInitial}`;
        
          const reviewCard = `    <div class="review-item">
  ${review.imageUrl !== "" 
    ? `<div class="review-item-image"><img src="${review.imageUrl}" alt="Review image"/></div>` 
    : ''
  }
       <div class="review-content">
        <div class="review-meta-info">
          {% render 'avatar'
            , name: "${shortenedName}" %}
          <div class="review-user-info">
            <h5>${review.author}</h5>
            <p>Verified Purchase {% render "tick" %} </p>
          </div>
          <p> ${new Date(review.createdAt).toLocaleDateString('en-US', {
              month: 'short',
              day: 'numeric',
              year: 'numeric'
            })}</p>
        </div>
        <div class="review-item-star-rating">${starToRender}</div>
        <div class="review-item-main-testimonial">
        <h5>${review.title}</h5>
          <p>${review.testimonial}</p>
        </div>
        <div class="review-item-tags">
          <div class="review-tag">Purchased on Sep 14th, 2025</div>
        </div>
        <div class="review-card-footer">
          <div class="review-card-action">
            {% render 'like' %}
            <p>Useful
              <b>${review.like}</b>
            </p>
          </div>
          <div class="review-card-action">
            {% render 'share' %}
            <p>Share</p>
          </div>
        </div>
        ${review.companyResponse != null ? `<div class="review-company-reply-container">
        <div class="left">{% render 'link-to-child' %}</div>
        <div class="right">
          <div class="company-reply-content">
            <div class="review-meta-info">
           {% render 'avatar', logo:block.settings.company-reply-logo %}
              <div class="review-user-info">
                <h5>Reply From Store</h5>
                <p>${new Date(review.createdAt).toLocaleDateString('en-US', {
                  month: 'short',
                  day: 'numeric',
                  year: 'numeric'
                })}</p>
              </div>
            </div>
            <div class="review-card-content">
              <p>${review.companyResponse}</p>
            </div>
          </div>
        </div>
      </div>
        </div>`:""}
  
      </div>
          `;
          container.insertAdjacentHTML('beforeend', reviewCard);
        };
        
        
        async function GetPaginatedReviews(currentPage,pageSize) {
          try {
            console.log(currentPage,"GetPaginatedReviews")
             const response = await fetch(`/apps/my-custom-path?product_id={{ product.id }}&current_page=${currentPage}&page_size=${pageSize}`, {
              headers: {
                "Content-Type": "application/json"
              }
            });
        
            if (!response.ok) {
              console.error("Proxy fetch failed:", response.statusText);
              return;
            }
            const res = await response.json();
            return res
          } catch (error) {
            console.log(error,"An unpected Error Occured")
          }
        }
        async function loadReviews(currentPage = 1, pageSize = 10) {
          try {
            console.log(currentPage,"laodreviews")
           
            const data = await GetPaginatedReviews(currentPage , pageSize )
            const allReviews = data.data.product.reviews|| [];
            const reviewMainContainer = document.querySelector(".all-review-container")
            reviewMainContainer.setAttribute("data-reviews", JSON.stringify(data)); 
            const reviewTable = document.querySelector(".all-review-table")
            
            reviewTable.innerHTML = "";
            allReviews.forEach((review) => {
              insertTableReviewItem(review, reviewTable);
            });
            renderPagination(data.data.meta, currentPage);
            reviewMainContainer.querySelector(".review-overview-container").scrollTo({ top: 0, behavior: 'smooth' });
            
          } catch (error) {
            console.error("Error loading reviews:", error);
          }
        }
        function renderPagination(meta, currentPage) {
  const paginationButtonsContainer = document.querySelector(".pagination-buttons-container");
  const prevBtn = document.querySelector(".page-button-edge:first-child");
  const nextBtn = document.querySelector(".page-button-edge:last-child");
  
  paginationButtonsContainer.innerHTML = ""; // clear previous
  
  const { totalPages } = meta;
  
  // Create numbered buttons
  for (let i = 1; i <= totalPages; i++) {
    const btn = document.createElement("button");
    btn.textContent = i;
    btn.setAttribute("data-scroll-target","all-review-quick-info")
    btn.classList.add("page-button");
    if (i === currentPage) {
      btn.classList.add("active");
    }
    btn.addEventListener("click", () => {
      loadReviews(i); // load clicked page
    });
    paginationButtonsContainer.appendChild(btn);
  }
  // Handle prev/next
  prevBtn.disabled = currentPage === 1;
  nextBtn.disabled = currentPage === totalPages;
  
  prevBtn.onclick = () => {
    if (currentPage > 1) loadReviews(currentPage - 1);
  };
  
  nextBtn.onclick = () => {
    if (currentPage < totalPages) loadReviews(currentPage + 1);
  };

      prevBtn.setAttribute("data-scroll-target","all-review-quick-info")
      nextBtn.setAttribute("data-scroll-target","all-review-quick-info")
    document.dispatchEvent(new Event("initScrollElements"));
  }
  
    
document.addEventListener("DOMContentLoaded", () => loadReviews(1, 10));

</script>


{% schema %}
  {
    "name": "All Review",
    "target": "section",
    "stylesheet": "base.css",
    "javascript": "base.js",
    "settings": [
      {
        "type": "text",
        "id": "section-id",
        "label": "Section ID",
        "info": "Enter the section id to scroll to "
      }, {
        "type": "image_picker",
        "id": "company-reply-logo",
        "label": "Company Response Logo"
      }
    ]
  }
{% endschema %}